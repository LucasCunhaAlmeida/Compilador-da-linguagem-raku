
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftOR_SXOR_SleftAND_SleftIGUAL_DPDIFleftMAIORMENORMAIOR_IGLLESSEQUALSMARTMATCHrightNOTNEGACABRE_CHAVE ADC ADC_DP AND AND_S ANY BAG BOOLEAN BREAK COMMA COMMENT CONC CONSTANT DECREMENTO DIF DIV DIVI DIVIDE ELSE ELSIF EXIT EXPORT FALSE FECHA_CHAVE FLOAT HAS ID IF IGUAL IGUAL_DP IMPORT INT INTEGER KMARK LAST LCM LESSEQUAL LET LIST LOOP LPAREN MAIOR MAIOR_IGL MAP MENOR MOD MU MULT MULTI MY NEED NEGAC NEXT NIL NOT ONLY OR OR_S OUR PAIR PONTO POW PUSH PV REDO REPLICARSTRING REQUIRE RETURN RPAR SET SETA SMARTMATCH SPLICE STATE STR STRING SUB TIMES TRUE UNARYMINUS UNIT UNSHIFT USE WHILE XOR XOR_Sexp : exp_tip\n            \n            | exp_logic\n            | exp_compexp_logic : exp AND_S exp\n                  | exp OR_S exp\n                  | exp XOR_S exp\n                  | NOT exp\n                  | NEGAC expexp_comp : exp IGUAL_DP exp\n                | exp DIF exp\n                | exp MAIOR exp\n                | exp MENOR exp\n                | exp MAIOR_IGL exp\n                | exp LESSEQUAL exp\n                | exp SMARTMATCH expexp_tip : INTEGER\n           | FLOAT\n           | STRING\n           | ID'
    
_lr_action_items = {'INTEGER':([0,9,10,11,12,13,14,15,16,17,18,19,20,],[5,5,5,5,5,5,5,5,5,5,5,5,5,]),'FLOAT':([0,9,10,11,12,13,14,15,16,17,18,19,20,],[6,6,6,6,6,6,6,6,6,6,6,6,6,]),'STRING':([0,9,10,11,12,13,14,15,16,17,18,19,20,],[7,7,7,7,7,7,7,7,7,7,7,7,7,]),'ID':([0,9,10,11,12,13,14,15,16,17,18,19,20,],[8,8,8,8,8,8,8,8,8,8,8,8,8,]),'NOT':([0,9,10,11,12,13,14,15,16,17,18,19,20,],[9,9,9,9,9,9,9,9,9,9,9,9,9,]),'NEGAC':([0,9,10,11,12,13,14,15,16,17,18,19,20,],[10,10,10,10,10,10,10,10,10,10,10,10,10,]),'$end':([1,2,3,4,5,6,7,8,21,22,23,24,25,26,27,28,29,30,31,32,],[0,-1,-2,-3,-16,-17,-18,-19,-7,-8,-4,-5,-6,-9,-10,-11,-12,-13,-14,-15,]),'AND_S':([1,2,3,4,5,6,7,8,21,22,23,24,25,26,27,28,29,30,31,32,],[11,-1,-2,-3,-16,-17,-18,-19,-7,-8,-4,11,11,-9,-10,-11,-12,-13,-14,-15,]),'OR_S':([1,2,3,4,5,6,7,8,21,22,23,24,25,26,27,28,29,30,31,32,],[12,-1,-2,-3,-16,-17,-18,-19,-7,-8,-4,-5,-6,-9,-10,-11,-12,-13,-14,-15,]),'XOR_S':([1,2,3,4,5,6,7,8,21,22,23,24,25,26,27,28,29,30,31,32,],[13,-1,-2,-3,-16,-17,-18,-19,-7,-8,-4,-5,-6,-9,-10,-11,-12,-13,-14,-15,]),'IGUAL_DP':([1,2,3,4,5,6,7,8,21,22,23,24,25,26,27,28,29,30,31,32,],[14,-1,-2,-3,-16,-17,-18,-19,-7,-8,14,14,14,-9,-10,-11,-12,-13,-14,-15,]),'DIF':([1,2,3,4,5,6,7,8,21,22,23,24,25,26,27,28,29,30,31,32,],[15,-1,-2,-3,-16,-17,-18,-19,-7,-8,15,15,15,-9,-10,-11,-12,-13,-14,-15,]),'MAIOR':([1,2,3,4,5,6,7,8,21,22,23,24,25,26,27,28,29,30,31,32,],[16,-1,-2,-3,-16,-17,-18,-19,-7,-8,16,16,16,16,16,-11,-12,-13,-14,-15,]),'MENOR':([1,2,3,4,5,6,7,8,21,22,23,24,25,26,27,28,29,30,31,32,],[17,-1,-2,-3,-16,-17,-18,-19,-7,-8,17,17,17,17,17,-11,-12,-13,-14,-15,]),'MAIOR_IGL':([1,2,3,4,5,6,7,8,21,22,23,24,25,26,27,28,29,30,31,32,],[18,-1,-2,-3,-16,-17,-18,-19,-7,-8,18,18,18,18,18,-11,-12,-13,-14,-15,]),'LESSEQUAL':([1,2,3,4,5,6,7,8,21,22,23,24,25,26,27,28,29,30,31,32,],[19,-1,-2,-3,-16,-17,-18,-19,-7,-8,19,19,19,19,19,-11,-12,-13,-14,-15,]),'SMARTMATCH':([1,2,3,4,5,6,7,8,21,22,23,24,25,26,27,28,29,30,31,32,],[20,-1,-2,-3,-16,-17,-18,-19,-7,-8,20,20,20,20,20,-11,-12,-13,-14,-15,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'exp':([0,9,10,11,12,13,14,15,16,17,18,19,20,],[1,21,22,23,24,25,26,27,28,29,30,31,32,]),'exp_tip':([0,9,10,11,12,13,14,15,16,17,18,19,20,],[2,2,2,2,2,2,2,2,2,2,2,2,2,]),'exp_logic':([0,9,10,11,12,13,14,15,16,17,18,19,20,],[3,3,3,3,3,3,3,3,3,3,3,3,3,]),'exp_comp':([0,9,10,11,12,13,14,15,16,17,18,19,20,],[4,4,4,4,4,4,4,4,4,4,4,4,4,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> exp","S'",1,None,None,None),
  ('exp -> exp_tip','exp',1,'p_exp','sintatico.py',14),
  ('exp -> exp_logic','exp',1,'p_exp','sintatico.py',16),
  ('exp -> exp_comp','exp',1,'p_exp','sintatico.py',17),
  ('exp_logic -> exp AND_S exp','exp_logic',3,'p_exp_logic','sintatico.py',22),
  ('exp_logic -> exp OR_S exp','exp_logic',3,'p_exp_logic','sintatico.py',23),
  ('exp_logic -> exp XOR_S exp','exp_logic',3,'p_exp_logic','sintatico.py',24),
  ('exp_logic -> NOT exp','exp_logic',2,'p_exp_logic','sintatico.py',25),
  ('exp_logic -> NEGAC exp','exp_logic',2,'p_exp_logic','sintatico.py',26),
  ('exp_comp -> exp IGUAL_DP exp','exp_comp',3,'p_exp_comp','sintatico.py',31),
  ('exp_comp -> exp DIF exp','exp_comp',3,'p_exp_comp','sintatico.py',32),
  ('exp_comp -> exp MAIOR exp','exp_comp',3,'p_exp_comp','sintatico.py',33),
  ('exp_comp -> exp MENOR exp','exp_comp',3,'p_exp_comp','sintatico.py',34),
  ('exp_comp -> exp MAIOR_IGL exp','exp_comp',3,'p_exp_comp','sintatico.py',35),
  ('exp_comp -> exp LESSEQUAL exp','exp_comp',3,'p_exp_comp','sintatico.py',36),
  ('exp_comp -> exp SMARTMATCH exp','exp_comp',3,'p_exp_comp','sintatico.py',37),
  ('exp_tip -> INTEGER','exp_tip',1,'p_exp_tip','sintatico.py',41),
  ('exp_tip -> FLOAT','exp_tip',1,'p_exp_tip','sintatico.py',42),
  ('exp_tip -> STRING','exp_tip',1,'p_exp_tip','sintatico.py',43),
  ('exp_tip -> ID','exp_tip',1,'p_exp_tip','sintatico.py',44),
]
